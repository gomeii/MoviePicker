{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gomez\\\\OneDrive\\\\Documents\\\\VS_Repositories\\\\MoviePicker\\\\MoviePicker\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieList = props => {\n  _s();\n  const [moviesWithAdditionalInfo, setMoviesWithAdditionalInfo] = useState([]);\n  useEffect(() => {\n    // Function to fetch additional information based on IMDb ID\n    async function fetchAdditionalInfo(imdbID) {\n      const response = await fetch(`http://www.omdbapi.com/?apikey=36043e2&i=${imdbID}`);\n      const data = await response.json();\n      // console.log(data);\n      return data;\n    }\n\n    // Function to fetch additional info for each movie and update state\n    async function fetchAdditionalInfoForMovies() {\n      const movies = props.movies; // props.movies contains the list of movies\n      const moviesWithInfo = [];\n      for (const movie of movies) {\n        const additionalInfo = await fetchAdditionalInfo(movie.imdbID);\n        // const Ratings = additionalInfo.Ratings;\n        // Main Data\n        const Plot = additionalInfo.Plot;\n        const Runtime = additionalInfo.Runtime;\n        const AgeRating = additionalInfo.Rated;\n        // Metadata\n        const Genres = additionalInfo.Genre.split(\",\");\n        const Language = additionalInfo.Language;\n        const Director = additionalInfo.Director;\n        // Ratings\n        const imdbRating = additionalInfo.imbdRating;\n        const MetaScore = additionalInfo.MetaScore;\n        const RottenTomatoes = additionalInfo.Ratings[1];\n        const movieWithInfo = {\n          ...movie,\n          additionalInfo\n        };\n        moviesWithInfo.push(movieWithInfo);\n        console.log(movieswithInfo);\n      }\n      setMoviesWithAdditionalInfo(moviesWithInfo);\n    }\n    fetchAdditionalInfoForMovies();\n  }, [props.movies]); // Trigger effect whenever props.movies change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: moviesWithAdditionalInfo.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-coutainer d-flex justify-content-start m-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.Poster,\n        alt: \"movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay d-flex align-items-center justify-content-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(MovieList, \"jcDCpBaj7bhGL+JvnZosHukFcdQ=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieList","props","_s","moviesWithAdditionalInfo","setMoviesWithAdditionalInfo","fetchAdditionalInfo","imdbID","response","fetch","data","json","fetchAdditionalInfoForMovies","movies","moviesWithInfo","movie","additionalInfo","Plot","Runtime","AgeRating","Rated","Genres","Genre","split","Language","Director","imdbRating","imbdRating","MetaScore","RottenTomatoes","Ratings","movieWithInfo","push","console","log","movieswithInfo","children","map","index","className","src","Poster","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gomez/OneDrive/Documents/VS_Repositories/MoviePicker/MoviePicker/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst MovieList = (props) => {\r\n  const [moviesWithAdditionalInfo, setMoviesWithAdditionalInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to fetch additional information based on IMDb ID\r\n    async function fetchAdditionalInfo(imdbID) {\r\n      const response = await fetch(`http://www.omdbapi.com/?apikey=36043e2&i=${imdbID}`);\r\n      const data = await response.json();\r\n      // console.log(data);\r\n      return data;\r\n    }\r\n\r\n    // Function to fetch additional info for each movie and update state\r\n    async function fetchAdditionalInfoForMovies() {\r\n      const movies = props.movies; // props.movies contains the list of movies\r\n      const moviesWithInfo = [];\r\n\r\n      for (const movie of movies) {\r\n        const additionalInfo = await fetchAdditionalInfo(movie.imdbID);\r\n        // const Ratings = additionalInfo.Ratings;\r\n        // Main Data\r\n        const Plot = additionalInfo.Plot;\r\n        const Runtime = additionalInfo.Runtime;\r\n        const AgeRating = additionalInfo.Rated;\r\n        // Metadata\r\n        const Genres = additionalInfo.Genre.split(\",\");\r\n        const Language = additionalInfo.Language;\r\n        const Director = additionalInfo.Director;\r\n        // Ratings\r\n        const imdbRating = additionalInfo.imbdRating;\r\n        const MetaScore = additionalInfo.MetaScore;\r\n        const RottenTomatoes = additionalInfo.Ratings[1];\r\n\r\n        const movieWithInfo = { ...movie, additionalInfo };\r\n        moviesWithInfo.push(movieWithInfo);\r\n        console.log(movieswithInfo);\r\n      }\r\n\r\n      setMoviesWithAdditionalInfo(moviesWithInfo);\r\n    }\r\n\r\n    fetchAdditionalInfoForMovies();\r\n  }, [props.movies]); // Trigger effect whenever props.movies change\r\n\r\n  return (\r\n    <>\r\n      {moviesWithAdditionalInfo.map((movie, index) => (\r\n        <div key={index} className='image-coutainer d-flex justify-content-start m-3'>\r\n          <img src={movie.Poster} alt='movie' />\r\n          <div className='overlay d-flex align-items-center justify-content-center'></div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGnD,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5ED,SAAS,CAAC,MAAM;IACd;IACA,eAAeW,mBAAmBA,CAACC,MAAM,EAAE;MACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CF,MAAO,EAAC,CAAC;MAClF,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;MACA,OAAOD,IAAI;IACb;;IAEA;IACA,eAAeE,4BAA4BA,CAAA,EAAG;MAC5C,MAAMC,MAAM,GAAGX,KAAK,CAACW,MAAM,CAAC,CAAC;MAC7B,MAAMC,cAAc,GAAG,EAAE;MAEzB,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;QAC1B,MAAMG,cAAc,GAAG,MAAMV,mBAAmB,CAACS,KAAK,CAACR,MAAM,CAAC;QAC9D;QACA;QACA,MAAMU,IAAI,GAAGD,cAAc,CAACC,IAAI;QAChC,MAAMC,OAAO,GAAGF,cAAc,CAACE,OAAO;QACtC,MAAMC,SAAS,GAAGH,cAAc,CAACI,KAAK;QACtC;QACA,MAAMC,MAAM,GAAGL,cAAc,CAACM,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;QAC9C,MAAMC,QAAQ,GAAGR,cAAc,CAACQ,QAAQ;QACxC,MAAMC,QAAQ,GAAGT,cAAc,CAACS,QAAQ;QACxC;QACA,MAAMC,UAAU,GAAGV,cAAc,CAACW,UAAU;QAC5C,MAAMC,SAAS,GAAGZ,cAAc,CAACY,SAAS;QAC1C,MAAMC,cAAc,GAAGb,cAAc,CAACc,OAAO,CAAC,CAAC,CAAC;QAEhD,MAAMC,aAAa,GAAG;UAAE,GAAGhB,KAAK;UAAEC;QAAe,CAAC;QAClDF,cAAc,CAACkB,IAAI,CAACD,aAAa,CAAC;QAClCE,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;MAC7B;MAEA9B,2BAA2B,CAACS,cAAc,CAAC;IAC7C;IAEAF,4BAA4B,CAAC,CAAC;EAChC,CAAC,EAAE,CAACV,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEpB,oBACEf,OAAA,CAAAE,SAAA;IAAAoC,QAAA,EACGhC,wBAAwB,CAACiC,GAAG,CAAC,CAACtB,KAAK,EAAEuB,KAAK,kBACzCxC,OAAA;MAAiByC,SAAS,EAAC,kDAAkD;MAAAH,QAAA,gBAC3EtC,OAAA;QAAK0C,GAAG,EAAEzB,KAAK,CAAC0B,MAAO;QAACC,GAAG,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtChD,OAAA;QAAKyC,SAAS,EAAC;MAA0D;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAFxER,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACN;EAAC,gBACF,CAAC;AAEP,CAAC;AAAC3C,EAAA,CAtDIF,SAAS;AAAA8C,EAAA,GAAT9C,SAAS;AAwDf,eAAeA,SAAS;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}