{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gomez\\\\OneDrive\\\\Documents\\\\VS_Repositories\\\\MoviePicker\\\\MoviePicker\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CarouselCard from './components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieList = props => {\n  _s();\n  const [moviesWithAdditionalInfo, setMoviesWithAdditionalInfo] = useState([]);\n  useEffect(() => {\n    // Function to fetch additional information based on IMDb ID\n    async function fetchAdditionalInfo(imdbID) {\n      const response = await fetch(`http://www.omdbapi.com/?apikey=36043e2&i=${imdbID}`);\n      const data = await response.json();\n      // console.log(data);\n      return data;\n    }\n\n    // Function to fetch additional info for each movie and update state\n    async function fetchAdditionalInfoForMovies() {\n      const movies = props.movies; // props.movies contains the list of movies\n      const moviesWithInfo = [];\n      for (const movie of movies) {\n        const additionalInfo = await fetchAdditionalInfo(movie.imdbID);\n\n        // Main Data\n        const Plot = additionalInfo.Plot;\n        const AgeRating = additionalInfo.Rated;\n        const Country = additionalInfo.Country;\n        // Metadata (General)\n        const Genres = additionalInfo.Genre.split(\", \");\n        const Language = additionalInfo.Language.split(\", \");\n        if (movie.Type === \"movie\") {\n          const Runtime = additionalInfo.Runtime;\n          // Metadata (Movie)\n          const Director = additionalInfo.Director;\n          const BoxOffice = additionalInfo.BoxOffice;\n          // Ratings\n          const imdbRating = additionalInfo.imdbRating; // Rating: [ 0.0 - 10.0 ]\n          const MetaScore = additionalInfo.Metascore; // Rating: [ 0   - 100  ]\n          const movieWithInfo = {\n            ...movie,\n            Plot,\n            Runtime,\n            AgeRating,\n            Genres,\n            Language,\n            Director,\n            Country,\n            BoxOffice,\n            imdbRating,\n            MetaScore\n          };\n          // console.log(movieWithInfo);\n          moviesWithInfo.push(movieWithInfo);\n        }\n        // const RottenTomatoes = additionalInfo.Ratings[1].Value; // Rating: [ 0%  - 100% ]\n        else {\n          const movieWithInfo = {\n            ...movie,\n            Plot,\n            AgeRating,\n            Genres,\n            Language,\n            Country\n          };\n          // console.log(movieWithInfo);\n          moviesWithInfo.push(movieWithInfo);\n        }\n      }\n      setMoviesWithAdditionalInfo(moviesWithInfo);\n    }\n    fetchAdditionalInfoForMovies();\n  }, [props.movies]); // Trigger effect whenever props.movies change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-start m-3\",\n      children: moviesWithAdditionalInfo.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-3 col-md-4 col-sm-6 mb-3\",\n        children: /*#__PURE__*/_jsxDEV(CarouselCard, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(MovieList, \"jcDCpBaj7bhGL+JvnZosHukFcdQ=\");\n_c = MovieList;\nexport default MovieList;\n\n// <Card>\n// <Card.Img variant=\"top\" src={movie.Poster} alt={movie.Title} style={{ maxWidth: '100%', height: 'auto' }} />\n// <Card.Body>\n//   <Card.Title>{movie.Title}</Card.Title>\n//   <Card.Text>\n//     {movie.additionalInfo && movie.additionalInfo.Plot}\n//   </Card.Text>\n//   <Card.Text>\n//     {/* Display additional information here */}\n//   </Card.Text>\n// </Card.Body>\n// </Card>\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","CarouselCard","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieList","props","_s","moviesWithAdditionalInfo","setMoviesWithAdditionalInfo","fetchAdditionalInfo","imdbID","response","fetch","data","json","fetchAdditionalInfoForMovies","movies","moviesWithInfo","movie","additionalInfo","Plot","AgeRating","Rated","Country","Genres","Genre","split","Language","Type","Runtime","Director","BoxOffice","imdbRating","MetaScore","Metascore","movieWithInfo","push","children","className","map","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gomez/OneDrive/Documents/VS_Repositories/MoviePicker/MoviePicker/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CarouselCard from './components/Card';\r\n\r\n\r\nconst MovieList = (props) => {\r\n  const [moviesWithAdditionalInfo, setMoviesWithAdditionalInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to fetch additional information based on IMDb ID\r\n    async function fetchAdditionalInfo(imdbID) {\r\n      const response = await fetch(`http://www.omdbapi.com/?apikey=36043e2&i=${imdbID}`);\r\n      const data = await response.json();\r\n      // console.log(data);\r\n      return data;\r\n    }\r\n\r\n    // Function to fetch additional info for each movie and update state\r\n    async function fetchAdditionalInfoForMovies() {\r\n      const movies = props.movies; // props.movies contains the list of movies\r\n      const moviesWithInfo = [];\r\n\r\n      for (const movie of movies) {\r\n        const additionalInfo = await fetchAdditionalInfo(movie.imdbID);\r\n        \r\n        // Main Data\r\n        const Plot = additionalInfo.Plot;\r\n        const AgeRating = additionalInfo.Rated;\r\n        const Country = additionalInfo.Country;\r\n        // Metadata (General)\r\n        const Genres = additionalInfo.Genre.split(\", \");\r\n        const Language = additionalInfo.Language.split(\", \");\r\n        if(movie.Type === \"movie\"){\r\n          const Runtime = additionalInfo.Runtime;\r\n          // Metadata (Movie)\r\n          const Director = additionalInfo.Director;\r\n          const BoxOffice = additionalInfo.BoxOffice;\r\n          // Ratings\r\n          const imdbRating = additionalInfo.imdbRating;           // Rating: [ 0.0 - 10.0 ]\r\n          const MetaScore = additionalInfo.Metascore;             // Rating: [ 0   - 100  ]\r\n          const movieWithInfo = { ...movie, Plot, Runtime, AgeRating, Genres, Language, Director, Country, BoxOffice, imdbRating, MetaScore};\r\n          // console.log(movieWithInfo);\r\n          moviesWithInfo.push(movieWithInfo);\r\n        }\r\n        // const RottenTomatoes = additionalInfo.Ratings[1].Value; // Rating: [ 0%  - 100% ]\r\n        else{\r\n          const movieWithInfo = { ...movie, Plot, AgeRating, Genres, Language, Country};\r\n          // console.log(movieWithInfo);\r\n          moviesWithInfo.push(movieWithInfo);\r\n        }\r\n      }\r\n\r\n      setMoviesWithAdditionalInfo(moviesWithInfo);\r\n    }\r\n\r\n    fetchAdditionalInfoForMovies();\r\n  }, [props.movies]); // Trigger effect whenever props.movies change\r\n\r\n  return (\r\n    <>\r\n    <div className=\"d-flex justify-content-start m-3\">\r\n      {moviesWithAdditionalInfo.map((movie, index) => (\r\n        <div key={index} className=\"col-lg-3 col-md-4 col-sm-6 mb-3\">\r\n        <CarouselCard movie={movie}></CarouselCard>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n\r\n\r\n// <Card>\r\n// <Card.Img variant=\"top\" src={movie.Poster} alt={movie.Title} style={{ maxWidth: '100%', height: 'auto' }} />\r\n// <Card.Body>\r\n//   <Card.Title>{movie.Title}</Card.Title>\r\n//   <Card.Text>\r\n//     {movie.additionalInfo && movie.additionalInfo.Plot}\r\n//   </Card.Text>\r\n//   <Card.Text>\r\n//     {/* Display additional information here */}\r\n//   </Card.Text>\r\n// </Card.Body>\r\n// </Card>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}